What is dependency injection and what are the advantages?

•	Reduced Dependencies
•	Reduced Dependency Carrying
•	More Reusable Code
•	More Testable Code
•	More Readable Code
What is a pattern? What is an anti-pattern. Is dependency injection a pattern?

In software engineering, a software design pattern is a general, reusable solution to a commonly occurring problem within a given 
context in software design.
An anti-pattern is the opposite of this
Dependency injection is a pattern

• What is an interface and what are the advantages of making use of them in Java

Interface é um contrato, injeção de dependências, reutilização de código, evitar refatoramento
https://dzone.com/articles/programming-when-use

Why are they recommended for Spring beans

https://dzone.com/articles/playing-sround-with-spring-bean-configuration
para trocar a implementação do bean apenas mudando arquivos de configuração

What is meant by “application-context?

The ApplicationContext is the central interface within a Spring application that is used for providing configuration
information to the application.

What is the concept of a “container” and what is its lifecycle?

The Spring container is at the core of the Spring Framework. The container will create the objects, wire them together, configure them,
and manage their complete life cycle from creation till destruction. The Spring container uses DI to manage the components that make up an
application. These objects are called Spring Beans, which we will discuss in the next chapter.
The container gets its instructions on what objects to instantiate, configure, and assemble by reading the configuration metadata provided. The configuration metadata can be represented either by XML, Java annotations

How are you going to create a new instance of an ApplicationContext?
ApplicationContext ap = new ClassPathXMLApplicationContext(“resources/spring.xml”);
Colocando um xml de configuração no construtor

Can you describe the lifecycle of a Spring Bean in an ApplicationContext?
Métodos Init e Destroy???

How are you going to create an ApplicationContext in an integration test test?
Using the The Spring TestContext Framework

What is the preferred way to close an application context? Does Spring Boot do this for
you?

Downcast your ApplicationContext to ConfigurableApplicationContext which defines close() method:

((ConfigurableApplicationContext)appCtx).close();

https://www.baeldung.com/spring-boot-shutdown

O spring boot faz isso automaticamente 
Fonte : https://stackoverflow.com/questions/26547532/how-to-shutdown-a-spring-boot-application-in-a-correct-way

Can you describe:

Dependency injection using Java configuration?

https://dzone.com/articles/defining-bean-dependencies-with-java-config-in-spring-framework

Dependency injection using annotations (@Component, @Autowired)

@Autowired
https://www.baeldung.com/spring-autowire

@Component
https://www.journaldev.com/21429/spring-component

Component scanning, Stereotypes and Meta-Annotations?

Component scanning :https://www.baeldung.com/spring-component-scanning
Stereotypes :The noun definition of stereotype from Merriam-Webster says this:

something conforming to a fixed or general pattern; especially : a standardized mental picture that is held in common by members
of a group and that represents an oversimplified opinion, prejudiced attitude, or uncritical judgment

It seems that it is for suggesting a role of particular class that is being annotated. This seems to make sense because it is often 
recommended that you annotate your Controller classes with @Controller, Service classes with @Service, and so on.

In addition to the obvious component-scanning functionality, Spring suggests that they make nice point-cut demarcations for your
AOP needs.
https://stackoverflow.com/questions/14756486/what-is-a-spring-stereotype

Meta-Annotations: 
Many of Spring 4’s annotations can now be used as meta annotations.  A meta annotation is an annotation that can be applied to
another annotation.  That means, you can now define your own custom annotations that are an amalgamation of many Spring annotations
combined into one annotation.

Scopes for Spring beans? What is the default scope?

Default scope: singleton
https://www.baeldung.com/spring-bean-scopes

Are beans lazily or eagerly instantiated by default? How do you alter this behavior?
default = eagerly
https://www.baeldung.com/spring-lazy-annotation

What is a property source? How would you use @PropertySource?
https://www.mkyong.com/spring/spring-propertysources-example/

What is a BeanFactoryPostProcessor and what is it used for? When is it invoked?
This interface provides a way for applications to modify their Spring context’s bean definitions before any beans get created. 
In my case, I needed to replace the client beans with their stub equivalents.
https://bravenewgeek.com/a-look-at-springs-beanfactorypostprocessor/
Why would you define a static @Bean method?
To @Bean methods that return  BeanFactoryPostProcessor types
https://stackoverflow.com/questions/30874244/bean-annotation-on-a-static-method

What is a ProperySourcesPlaceholderConfigurer used for?
https://dzone.com/articles/spring-core-diving-into-the-propertyplaceholdercon

What is a BeanPostProcessor and how is it different to a BeanFactoryPostProcessor? 
https://stackoverflow.com/questions/30455536/beanfactorypostprocessor-and-beanpostprocessor-in-lifecycle-events

What do they do? When are they called?
Modificam bean definitions. 
BeanFactoryPostProcessor é executado antes dos beans serem instanciados
BeanPostProcessor é executado após os beans serem instanciados

What is an initialization method and how is it declared on a Spring bean?
https://www.baeldung.com/running-setup-logic-on-startup-in-spring

What is a destroy method, how is it declared and when is it called
https://stackoverflow.com/questions/44756872/spring-core-default-bean-destroy-method

Consider how you enable JSR-250 annotations like @PostConstruct and
@PreDestroy? When/how will they get called
https://stackoverflow.com/questions/29064235/how-to-activate-jsr-250-annotation-into-a-spring-application-that-is-not-configu

How else can you define an initialization or destruction method for a Spring bean
Citar os n tipos de inicialização?

What does component-scanning do?
https://dzone.com/articles/spring-component-scan

What is the behavior of the annotation @Autowired with regards to field injection,
constructor injection and method injection?
https://www.baeldung.com/spring-autowire

What do you have to do, if you would like to inject something into a private field? Ho does
this impact testing?
inject by setter and constructor, it causes impacts to mock fields

How does the @Qualifier annotation complement the use of @Autowired?
para usar múltiplas instâncias de um mesmo bean

What is a proxy object and what are the two different types of proxies Spring can create?
Interface and object proxies
https://dzone.com/articles/power-proxies-java

What are the limitations of these proxies (per type)?

JAVA Proxies:
They are based on runtime implementations of interfaces
They are public, final and not abstract
They extend java.lang.reflect.Proxy

CGLib proxies:
you are not required to implement interfaces
you can extend a class

What are the advantages of Java Config? What are the limitations?
Advantages:Java is type safe. Compiler will report issues if you are configuring right bean class qualifiers.
Limitation: Cant put the configurations in one place?????

What does the @Bean annotation do? 
To declare a bean, simply annotate a method with the @Bean annotation. When JavaConfig encounters such a method,
it will execute that method and register the return value as a bean within a BeanFactory. By default, 
the bean name will be the same as the method name 
https://docs.spring.io/spring-javaconfig/docs/1.0.0.M4/reference/html/ch02s02.html

What is the default bean id if you only use @Bean? How can you override this?
When Spring creates a Bean Definition from a @Service or @Component annotation, 
it will by default create an id for the bean by lowercasing the first letter of the Class Name. 
If you want to override that the behavior, you can provide an alternative id in the annotation, eg. @Service("profileService").
https://stackoverflow.com/questions/29457834/what-is-the-bean-id-of-spring-bean-implements-an-interface

Why are you not allowed to annotate a final class with @Configuration
https://stackoverflow.com/questions/29074270/why-in-spring-i-am-not-allowed-to-annotate-a-final-class-with-configuration

How do @Configuration annotated classes support singleton beans?
é singleton por id
https://dzone.com/articles/an-interview-question-on-spring-singletons

Why can’t @Bean methods be final either?
por que ele também extends a classe

 How do you configure profiles?, What are possible use cases where they might be useful?
 https://www.baeldung.com/spring-profiles
 úteis para separar ambientes
 
 Can you use @Bean together with @Profile?
 sim
 
 Can you use @Component together with @Profile?
 sim
 
 How many profiles can you have? 
 muitos????
 
 How do you inject scalar/literal values into Spring beans?
 https://dzone.com/articles/playing-sround-with-spring-bean-configuration
 
 What is @Value used for?
This annotation can be used for injecting values into fields in Spring-managed beans and it can be applied at the field or 
constructor/method parameter level.

What is Spring Expression Language (SpEL for short)?
https://www.baeldung.com/spring-expression-language

What is the Environment abstraction in Spring?
Interface representing the environment in which the current application is running. 
Models two key aspects of the application environment: profiles and properties. 
Methods related to property access are exposed via the PropertyResolver superinterface.
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/env/Environment.html

Where can properties in the environment come from – there are many sources for
properties – check the documentation if not sure. Spring Boot adds even more.
https://www.baeldung.com/properties-with-spring

What can you reference using SpEL?
In Spring EL, you can reference a bean, and nested properties using a ‘dot (.)‘ symbol.

What is the difference between $ and # in @Value expressions?
${...} is the property placeholder syntax. It can only be used to dereference properties.
#{...} is SpEL syntax, which is far more capable and complex. It can also handle property placeholders, and a lot more besides.

● What is the concept of AOP? Which problem does it solve? What is a cross cutting concern?

Aspect-Oriented Programming (AOP) is another way of thing to some areas of application i.e. cross cutting concern like security, logging and transaction. AOP is simple complement of OOP programming for different concerns. In OOP, the key unit of modularity is the class, whereas in AOP the unit of modularity is the aspect.

Aspect-Oriented Programming (AOP) enables modularization of cross-cutting concerns to solve following problems.

To avoid tangling
To eliminate scattering

AOP is often defined as a technique that promotes separation of concerns in a software system. Systems are composed of several 
components, each responsible for a specific piece of functionality. But often these components also carry additional responsibilities 
beyond their core functionality. System services such as logging, transaction management, and security often find their way into 
components whose core responsibilities is something else. These system services are commonly referred to as cross-cutting concerns 
because they tend to cut across multiple components in a system.
https://www.dineshonjava.com/spring-aop-interview-questions-and-answers/

○ Name three typical cross cutting concerns.
logging, security and data transfer

○ What two problems arise if you don't solve a cross cutting concern via AOP?
Implementing Cross Cutting Concerns Without Modularization
• Failing to modularize cross-cutting concerns leads to two things
– Code tangling
• A coupling of concerns
– Code scattering
• The same concern spread across modules
https://www.dineshonjava.com/spring-aop-interview-questions-and-answers/

What is a pointcut, a join point, an advice, an aspect, weaving?
Pointcut
– An expression that selects one or more Join Points
Join Point
– A point in the execution of a program such as a method call or exception thrown
Advice
– Code to be executed at each selected Join Point
Aspect
– A module that encapsulates pointcuts and advice
Weaving
– Technique by which aspects are combined with main code
Introduction
-Spring AOP allows to introduce new interfaces (and a corresponding application) to any object advises.
Target Object
-An object is assisted by one or more respects. Also known as the object advised.
AOP Proxy
-AOP proxy is an object used to perform the contract area. This object is created by the AOP framework. In Spring AOP proxy is part of JDK dynamic proxy or proxy CGLIB.

How does Spring solve (implement) a cross cutting concern?
Implement your mainline application logic
– Focusing on the core problem
Write aspects to implement your cross-cutting concerns
– Spring provides many aspects out-of-the-box
Weave the aspects into your application
– Adding the cross-cutting behaviors to the right places

Which are the limitations of the two proxy-types?
○ What visibility must Spring bean methods have to be proxied using Spring AOP?

Spring will create either JDK or CGLib proxies

JDK Proxy
Also called dynamic proxies
API is built into the JDK
Requirements: Java interface(s)
All interfaces proxied
CGLib Proxy
NOT built into JDK
Included in Spring jars
Used when interface not available
Cannot be applied to final classes or methods

How many advice types does Spring support. Can you name each one?
○ What are they used for?
○ Which two advices can you use if you would like to try and catch exceptions?

Before advice: Advice that executes before a join point, but which does not have the ability to prevent execution flow proceeding to the
join point (unless it throws an exception).
After returning advice: Advice to be executed after a join point completes normally: for example, if a method returns without throwing 
an exception.
After throwing advice: Advice to be executed if a method exits by throwing an exception.
After advice: Advice to be executed regardless of the means by which a join point exits (normal or exceptional return).
Around advice: Advice that surrounds a join point such as a method invocation. This is the most powerful kind of advice. 
Around advice can perform custom behavior before and after the method invocation. It is also responsible for choosing whether to proceed 
to the join point or to shortcut the advised method execution by returning its own return value or throwing an exception.

What do you have to do to enable the detection of the @Aspect annotation?
To use @AspectJ aspects in a Spring configuration you need to enable Spring support for configuring Spring AOP based on @AspectJ aspects,
and autoproxying beans based on whether or not they are advised by those aspects.

If shown pointcut expressions, would you understand them?
○ For example, in the course we matched getter methods on Spring Beans, what would be the
correct pointcut expression to match both getter and setter methods?

Any class: @Pointcut("execution( get(..)) && execution( set(..))")
Certain class: @Pointcut("execution( someService.get(..)) && execution( someService.set(..))")
https://quizlet.com/324491121/aspect-oriented-programming-flash-cards/
https://www.baeldung.com/spring-aop-pointcut-tutorial

What is the JoinPoint argument used for?
Advices have as a parameter a reference of type org.aspectj.lang.JoinPoint. The object that spring injects at runtime provides
access to both the state available at a join point and static information about it: type of the target, name of the method target,
arguments, reference to the target itself. This information can be used for tracing and logging; it does not give direct control over 
the execution of the target method.

https://quizlet.com/324491121/aspect-oriented-programming-flash-cards/

What is a ProceedingJoinPoint? When is it used?
The type ProceedingJoinPoint inherits from JoinPoint and adds the proceed() method that is used to call the target method. 
Around advice is declared using the @Around annotation. The first parameter of the advice method must be of type ProceedingJoinPoint. 
Within the body of the advice, calling proceed() on the ProceedingJoinPoint causes the underlying method to execute. 
The proceed method may also be called passing in an Object[] - the values in the array will be used as the arguments to the method 
execution when it proceeds.

https://quizlet.com/324491121/aspect-oriented-programming-flash-cards/
